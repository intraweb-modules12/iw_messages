<?php
// $Id: pnuser.php,v 1.33 2005/08/06 08:40:54 landseer Exp $
// ----------------------------------------------------------------------
// PostNuke Content Management System
// Copyright (C) 2002 by the PostNuke Development Team.
// http://www.postnuke.com/
// ----------------------------------------------------------------------
// Based on:
// PHP-NUKE Web Portal System - http://phpnuke.org/
// Thatware - http://thatware.org/
// ----------------------------------------------------------------------
// LICENSE
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License (GPL)
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// To read the license please visit http://www.gnu.org/copyleft/gpl.html
// ----------------------------------------------------------------------
/**
 * Messages Module
 *
 * Purpose of file:  user display functions --
 *                   This file contains all user GUI functions for the module
 *
 * @package      PostNuke_Miscellaneous_Modules
 * @subpackage   Messages
 * @version      $Id: pnuser.php,v 1.33 2005/08/06 08:40:54 landseer Exp $
 * @author       Mark West
 * @author       Richard Tirtadji
 * @link         http://www.postnuke.com  The PostNuke Home Page
 * @copyright    Copyright (C) 2002 by the PostNuke Development Team
 * @license      http://www.gnu.org/copyleft/gpl.html GNU General Public License
 */

/**
 * the main user function
 *
 * This function is the default function, and is called whenever the module is
 * initiated without defining arguments.  As such it can be used for a number
 * of things, but most commonly it either just shows the module menu and
 * returns or calls whatever the module designer feels should be the default
 * function (often this is the view() function)
 *
 * @author       The PostNuke Development Team
 * @return       output       The main module page
 */
function iw_messages_user_main()
{
	// Security check - important to do this as early as possible to avoid
	// potential security holes or just too much wasted processing.  For the
	// main function we want to check that the user has at least overview
	// privilege for some item within this component, or else they won't be
	// able to see anything and so we refuse access altogether.  The lowest
	// level of access for administration depends on the particular module, but
	// it is generally either 'overview' or 'read'
	// Security check
	if (!SecurityUtil::checkPermission( 'iw_messages::', '::', ACCESS_OVERVIEW) || !pnUserLoggedIn()) {
		return LogUtil::registerPermissionError();
	}

	// Create output object - this object will store all of our output so that
	// we can return it easily when required
	$pnRender = pnRender::getInstance('iw_messages',false);

	// assign the output of the main function
	$pnRender -> assign('main', iw_messages_user_view());

	//Comptabilitzem la visita si no ho estï¿œ
	if (pnModAvailable('iw_visits') && pnModIsHooked('iw_visits', 'iw_messages')){
		//Entrem el registre
		pnModAPIFunc('iw_visits', 'user', 'visita');
	}

	// Return the output that has been generated by this function
	return $pnRender -> fetch('iw_messages_user_main.htm');
}

/**
 * view items
 *
 * This is a standard function to provide an overview of all of the items
 * available from the module.
 *
 * @author       The PostNuke Development Team
 * @Modified by  Albert PÃ©rez Monfort
 * @param        integer      $startnum    (optional) The number of the start item
 * @return       output       The overview page
 */
function iw_messages_user_view($args){
	$dom = ZLanguage::getModuleDomain('iw_messages');
	$inici = FormUtil::getPassedValue('inici', isset($args['inici']) ? $args['inici'] : null, 'REQUEST');
	$rpp = FormUtil::getPassedValue('rpp', isset($args['rpp']) ? $args['rpp'] : null, 'POST');
	$inicisend = FormUtil::getPassedValue('inicisend', isset($args['inicisend']) ? $args['inicisend'] : null, 'REQUEST');
	$rppsend = FormUtil::getPassedValue('rppsend', isset($args['rppsend']) ? $args['rppsend'] : null, 'POST');
	$filtersend = FormUtil::getPassedValue('filtersend', isset($args['filtersend']) ? $args['filtersend'] : null, 'POST');
	$filter = FormUtil::getPassedValue('filter', isset($args['filter']) ? $args['filter'] : null, 'POST');

	// Security check - important to do this as early as possible to avoid
	// potential security holes or just too much wasted processing
	if (!SecurityUtil::checkPermission( 'iw_messages::', '::', ACCESS_OVERVIEW) || !pnUserLoggedIn()) {
		return LogUtil::registerPermissionError();
	}

	$uid = pnUserGetVar('uid');

	if ($rpp == '') {
		$sv = pnModFunc('iw_main', 'user', 'genSecurityValue');
		$rpp = pnModFunc('iw_main', 'user', 'userGetVar',
		                  array('uid' => $uid,
								'name' => 'rpp',
								'module' => 'iw_messages',
								'sv' => $sv));
	} else {
		$sv = pnModFunc('iw_main', 'user', 'genSecurityValue');
		pnModFunc('iw_main', 'user', 'userSetVar',
		           array('uid' => $uid,
						 'name' => 'rpp',
						 'module' => 'iw_messages',
						 'sv' => $sv,
						 'value' => $rpp));	
	}

	if ($inici == '') {
		$sv = pnModFunc('iw_main', 'user', 'genSecurityValue');
		$inici = pnModFunc('iw_main', 'user', 'userGetVar',
		                    array('uid' => $uid,
								  'name' => 'inici',
								  'module' => 'iw_messages',
								  'sv' => $sv));
	} else {
		$sv = pnModFunc('iw_main', 'user', 'genSecurityValue');
		pnModFunc('iw_main', 'user', 'userSetVar',
		           array('uid' => $uid,
						 'name' => 'inici',
						 'module' => 'iw_messages',
						 'sv' => $sv,
						 'value' => $inici));
	}

	if ($rppsend == '') {
		$sv = pnModFunc('iw_main', 'user', 'genSecurityValue');
		$rppsend = pnModFunc('iw_main', 'user', 'userGetVar',
		                      array('uid' => $uid,
								    'name' => 'rppsend',
									'module' => 'iw_messages',
									'sv' => $sv));
	} else {
		$sv = pnModFunc('iw_main', 'user', 'genSecurityValue');
		pnModFunc('iw_main', 'user', 'userSetVar',
		           array('uid' => $uid,
						 'name' => 'rppsend',
						 'module' => 'iw_messages',
						 'sv' => $sv,
						 'value' => $rppsend));
	}

	if ($inicisend == '') {
		$sv = pnModFunc('iw_main', 'user', 'genSecurityValue');
		$inicisend = pnModFunc('iw_main', 'user', 'userGetVar',
		                        array('uid' => $uid,
									  'name' => 'inicisend',
									  'module' => 'iw_messages',
									  'sv' => $sv));
	} else {
		$sv = pnModFunc('iw_main', 'user', 'genSecurityValue');
		pnModFunc('iw_main', 'user', 'userSetVar',
		           array('uid' => $uid,
					     'name' => 'inicisend',
						 'module' => 'iw_messages',
						 'sv' => $sv,
						 'value' => $inicisend));
	}

	if ($filtersend == '') {
		$sv = pnModFunc('iw_main', 'user', 'genSecurityValue');
		$filtersend = pnModFunc('iw_main', 'user', 'userGetVar',
		                         array('uid' => $uid,
									   'name' => 'filtersend',
									   'module' => 'iw_messages',
									   'sv' => $sv));
		if ($filtersend == '') {$filtersend = '-1';}
	} else {
		$sv = pnModFunc('iw_main', 'user', 'genSecurityValue');
		pnModFunc('iw_main', 'user', 'userSetVar',
		           array('uid' => $uid,
						 'name' => 'filtersend',
						 'module' => 'iw_messages',
						 'sv' => $sv,
						 'value' => $filtersend));
	}

	if ($filter == '') {
		$sv = pnModFunc('iw_main', 'user', 'genSecurityValue');
		$filter = pnModFunc('iw_main', 'user', 'userGetVar',
		                     array('uid' => $uid,
								   'name' => 'filter',
								   'module' => 'iw_messages',
								   'sv' => $sv));
		if($filter == ''){$filter = '-1';}
	} else {
		$sv = pnModFunc('iw_main', 'user', 'genSecurityValue');
		pnModFunc('iw_main', 'user', 'userSetVar',
		           array('uid' => $uid,
					     'name' => 'filter',
						 'module' => 'iw_messages',
						 'sv' => $sv,
						 'value' => $filter));
	}

	if ($rpp <= 0) {$rpp = 10;}
	if ($inicisend <= 0) {$inicisend = 0;}
	if ($rppsend <= 0) {$rppsend = 10;}
	if ($inici <= 0) {$inici = 0;}

	// The API function is called.  The arguments to the function are passed in
	// as their own arguments array
	$items = pnModAPIFunc('iw_messages', 'user', 'getall',
	                       array('uid' => $uid,
								 'inici' => $inici,
								 'numitems' => $rpp,
								 'filter'=>$filter));
	$items1 = pnModAPIFunc('iw_messages', 'user', 'getallsend',
	                        array('uid' => $uid,
								  'inicisend' => $inicisend,
								  'numitems' => $rppsend,
								  'filtersend'=>$filtersend));

	// Create output object - this object will store all of our output so that
	// we can return it easily when required
	$pnRender = pnRender::getInstance('iw_messages',false);

	//Count the number of messages in boxs	
	$messagecount = pnModAPIFunc('iw_messages', 'user', 'countitems',
	                              array('uid' => pnUserGetVar('uid')));
	$messagecountsend = pnModAPIFunc('iw_messages', 'user', 'countitemssend',
	                                  array('uid' => pnUserGetVar('uid')));
	$pnRender -> assign('messagecount', $messagecount );
	$pnRender -> assign('messagecountsend', $messagecountsend);

	// calc the use percentage
	$limitInBox = pnModGetVar('iw_messages','limitInBox');
	$limitOutBox = pnModGetVar('iw_messages','limitOutBox');

	if ($limitInBox != 0) {
		$limitInBox100 = round($messagecount * 100 / $limitInBox,2);
		//Check if the user come over the maximum number of messeges
		//Only some times, randomly, a advertissement is showed
		if($limitInBox100 > 100){
			$pnRender -> assign('inComeOver',true);
		}
		$pnRender -> assign('limitInBox100',$limitInBox100);
		$imgInWidth = (194 * $limitInBox100 / 100 > 194) ? 194 : 194 * $limitInBox100/100;
		$pnRender -> assign('imgInWidth', number_format($imgInWidth, 2, '.', ''));
	}

	if ($limitOutBox != 0) {
		$limitOutBox100 = round($messagecountsend * 100 / $limitOutBox,2);
		//Check if the user come over the maximum number of messeges
		//Only some times, randomly, a advertissement is showed
		if($limitOutBox100 > 100){
			$pnRender -> assign('outComeOver',true);
		}
		$pnRender -> assign('limitOutBox100',$limitOutBox100);
		$imgOutWidth = (194 * $limitOutBox100 / 100 > 194) ? 194 : 194 * $limitOutBox100/100;
		$pnRender -> assign('imgOutWidth', number_format($imgOutWidth, 2, '.', ''));
	}
	$month_long = explode(' ', __('January February March April May June July August September October November December', $dom));
	$messages = array();

	if (is_array($items)) {
        foreach ($items as $item) {
			$usersList .= $item['from_userid'].'$$';
			
			// get a Unix timestamp for this date/time  -- Alarion :: 08/21/2001
			$item['msg_time'] = mktime( substr($item['msg_time'], 11, 2),     // hour
                                        substr($item['msg_time'], 14, 2),     // minute
                                        '0',                                   // second
                                        substr($item['msg_time'], 5, 2),      // month
                                        substr($item['msg_time'], 8, 2),      // day
                                        substr($item['msg_time'], 0, 4));     // year
			
			$item['posterdata'] = pnUserGetVars($item['from_userid']);
			if($item['from_userid'] == 1) {
				// anonymous user
				$item['posterdata']['pn_name'] = $item['posterdata']['pn_uname'];
			}

			$userTime = GetUserTime($item['msg_time']);
			$item['messagetime'] = date('d/', $userTime).$month_long[date('m', $userTime)-1].date('/Y - H.i', $userTime);
			
			
			$messages[] = $item;
		}
	}

	$pnRender -> assign('messages', $messages);

	$month_long = explode(' ', __('January February March April May June July August September October November December', $dom));

	$messagessend = array();
	if (is_array($items1)) {
        foreach ($items1 as $item1) {
			$usersList .= $item1['to_userid'].'$$';
			$item1['posterdata'] = pnUserGetVars($item1['to_userid']);
        	if($item1['to_userid'] == 1) {
        		// anonymous user
				$item1['posterdata']['pn_name'] = $item1['posterdata']['pn_uname'];
			}

			$item1['msg_time'] = mktime(substr($item1['msg_time'], 11, 2),	// hour
										substr($item1['msg_time'], 14, 2),	// minute
										'0',					// second
										substr($item1['msg_time'], 5, 2),	// month
										substr($item1['msg_time'], 8, 2),	// day
										substr($item1['msg_time'], 0, 4));	// year

			$userTime = GetUserTime($item1['msg_time']);
			$item1['messagetime'] = date('d/', $userTime).$month_long[date('m', $userTime)-1].date('/Y - H.i', $userTime);
			
			if($item1['msg_readtime'] != ""){
				$item1['msg_readtime'] = mktime(substr($item1['msg_readtime'], 11, 2),	// hour
												substr($item1['msg_readtime'], 14, 2),	// minute
												'0',						// second
												substr($item1['msg_readtime'], 5, 2),	// month
												substr($item1['msg_readtime'], 8, 2),	// day
												substr($item1['msg_readtime'], 0, 4));	// year
				$userTime = GetUserTime($item1['msg_readtime']);
				$item1['messagetimeread'] = date('d/', $userTime).$month_long[date('m', $userTime)-1].date('/Y - H.i', $userTime);
			}else{
				$item1['messagetimeread'] = __('Not read', $dom);
			}

			$messagessend[] = $item1;
		}
	}
	if($inici > $messagecount){
		//Ho poso per si s'esborren les darreres anotacions de l'ï¿œltima pï¿œgina
		pnRedirect(pnModURL('iw_messages', 'user', 'main',
		                     array('inici' => 0,
								   'rpp' => $rpp,
								   'inicisend' => $inicisend,
								   'rppsend' => $rppsend)));
	}

	if($inicisend > $messagecountsend){
		//Ho poso per si s'esborren les darreres anotacions de l'ï¿œltima pï¿œgina
		pnRedirect(pnModURL('iw_messages', 'user', 'main',
		                     array('inici' => $inici,
								   'rpp' => $rpp,
								   'inicisend' => 0,
								   'rppsend' => $rppsend)));
	}

	$pager = pnModFunc('iw_messages', 'user', 'pager',
	                    array('inici' => $inici,
							  'rpp' => $rpp,
							  'total' => $messagecount,
							  'urltemplate' => "javascript:view(%%,$rpp,$inicisend,$rppsend)"));

	$pagersend = pnModFunc('iw_messages', 'user', 'pager', array('inici' => $inicisend,
																	'rpp' => $rppsend,
																	'total' => $messagecountsend,
																	'urltemplate' => "javascript:view($inici,$rpp,%%,$rppsend)"));																	
	$filtersend_MS = array(array('id' => '-1',
									'name' => __('All', $dom)),
							array('id' => 1,
									'name' => __('Only not readed', $dom)));
	$filter_MS = array(array('id' => '-1',
							 'name' => __('All', $dom)),
					   array('id' => 1,
						     'name' => __('Only marked messages', $dom)));
	$rpp_MS = array(array('id' => 10,
						  'name' => 10),
					array('id' => 20,
						  'name' => 20),
					array('id' => 50,
						  'name' => 50));

	//get all users information
	$sv = pnModFunc('iw_main', 'user', 'genSecurityValue');
	$users = pnModFunc('iw_main', 'user', 'getAllUsersInfo',
	                    array('sv' => $sv,
							  'info' => 'ncc',
							  'list' => $usersList));

	$pnRender -> assign('inici', $inici);
	$pnRender -> assign('inicisend', $inicisend);
	$pnRender -> assign('filter_MS', $filter_MS);
	$pnRender -> assign('filter', $filter);
	$pnRender -> assign('users', $users);
	$pnRender -> assign('filtersend_MS', $filtersend_MS);
	$pnRender -> assign('filtersend', $filtersend);
	$pnRender -> assign('rpp_MS', $rpp_MS);
	$pnRender -> assign('rpp', $rpp);
	$pnRender -> assign('rppsend', $rppsend);
	$pnRender -> assign('pager', $pager);
	$pnRender -> assign('pagersend', $pagersend);
	$pnRender -> assign('messagessend', $messagessend);

	return $pnRender -> fetch('iw_messages_user_view.htm');
}

/**
 * Show the information about the module
 * @author:     Albert PÃ©rez Monfort (aperezm@xtec.cat)
 * @return:	The information about this module
*/
function iw_messages_user_module()
{
	// Create output object
	$pnRender = pnRender::getInstance('iw_messages',false);

	$module = pnModFunc('iw_main', 'user', 'module_info',
	                     array('module_name' => 'iw_messages',
							   'type' => 'user'));
	$pnRender -> assign('module', $module);
	return $pnRender -> fetch('iw_messages_user_module.htm');
}

/**
 * display item
 *
 * This is a standard function to provide detailed informtion on a single item
 * available from the module.
 *
 * @author       The PostNuke Development Team
 * @param        integer      $tid     the ID of the item to display
 * @return       output       The item detail page
 */
function iw_messages_user_display($args)
{
	$dom = ZLanguage::getModuleDomain('iw_messages');
	$msgid = FormUtil::getPassedValue('msgid', isset($args['msgid']) ? $args['msgid'] : null, 'REQUEST');
	$inici = FormUtil::getPassedValue('inici', isset($args['inici']) ? $args['inici'] : 1, 'REQUEST');
	$rpp = FormUtil::getPassedValue('rpp', isset($args['rpp']) ? $args['rpp'] : 10, 'POST');
	$inicisend = FormUtil::getPassedValue('inicisend', isset($args['inicisend']) ? $args['inicisend'] : 1, 'REQUEST');
	$rppsend = FormUtil::getPassedValue('rppsend', isset($args['rppsend']) ? $args['rppsend'] : 10, 'POST');
	$filtersend = FormUtil::getPassedValue('filtersend', isset($args['filtersend']) ? $args['filtersend'] : -1, 'POST');
	$filter = FormUtil::getPassedValue('filter', isset($args['filter']) ? $args['filter'] : -1, 'POST');
	
	$uid = pnUserGetVar('uid');

	// The API function is called.  The arguments to the function are passed in
	// as their own arguments array
	$item = pnModAPIFunc('iw_messages', 'user', 'get',
	                      array('uid' => $uid,
								'msgid' => $msgid));

	// The return value of the function is checked here, and if the function
	// suceeded then an appropriate message is posted.  Note that if the
	// function did not succeed then the API function should have already
	// posted a failure message so no action is required
	if (!$item) {
		LogUtil::registerError (__('Message not found', $dom));
		return pnRedirect(pnModURL('iw_messages', 'user', 'main'));	
	}

	// Turn this time string into a UNIX timestamp for use with GetUserTime
	$item['msg_time'] = mktime( substr($item['msg_time'], 11, 2),     // hour
                            substr($item['msg_time'], 14, 2),     // minute
                            '0',                                   // second
                            substr($item['msg_time'], 5, 2),      // month
                            substr($item['msg_time'], 8, 2),      // day
                            substr($item['msg_time'], 0, 4));     // year

	// update the read count
	if ($item['read_msg'] == 0) {
    	pnModAPIFunc('iw_messages', 'user', 'setreadstatus',
    	              array('msgid' => $item['msg_id']));
		$sv = pnModFunc('iw_main', 'user', 'genSecurityValue');
		pnModFunc('iw_main', 'user', 'userSetVar',
		           array('module' => 'iw_main_block_news',
						 'name' => 'have_news',
						 'value' => 'me',
						 'sv' => $sv));
	}

	$month_long = explode(' ', __('January February March April May June July August September October November December', $dom));
	$userTime = GetUserTime($item['msg_time']);
	$i = date('d/', $userTime).$month_long[date('m', $userTime)-1].date('/Y - H.i', $userTime);

	$pnRender = pnRender::getInstance('iw_messages',false);

	$pnRender -> cache_id = $uid . $msgid;

	if (!is_array($item)) {
    	$pnRender -> assign('errormsg', __('You don\'t have any messages', $dom));
	} else {
    	$message = array();
    	$item['posterdata'] = pnUserGetVars($item['from_userid']);

		$sv = pnModFunc('iw_main', 'user', 'genSecurityValue');
		$item['posterdata']['pn_uname'] = pnModFunc('iw_main', 'user', 'getUserInfo',
		                                             array('uid' => $item['posterdata']['pn_uid'],
														   'sv' => $sv));
		$sv = pnModFunc('iw_main', 'user', 'genSecurityValue');
		$item['posterdata']['userFullName'] = pnModFunc('iw_main', 'user', 'getUserInfo', array('uid' => $item['posterdata']['pn_uid'],
																								'sv' => $sv,
																								'info' =>'ncc'));

    	if(substr($item['posterdata']['pn_url'], 0, 4) != 'http')  {
			$item['posterdata']['pn_url'] = "http://" . $item['posterdata']['pn_url'];
    	}
		$userTime = GetUserTime($item['msg_time']);
    	$item['messagetime'] = date('d/', $userTime).$month_long[date('m', $userTime)-1].date('/Y - H.i', $userTime);
		
    	// bit of a cheat here .. greg.
    	$item['message'] = pnModAPIFunc('iw_messages', 'user', 'replacesignature',
    	                                 array('signature' => $item['posterdata']['user_sig'],
											   'message' => $item['msg_text']));

    	$item['reply'] = $item['reply'];

		for ($i=1; $i < 4; $i++){
			// Get file extension
			$fileExtension = strtolower(substr(strrchr($item['file'.$i],"."),1));

			// get file icon
			$ctypeArray = pnModFunc('iw_main', 'user', 'getMimetype',
			                         array('extension' => $fileExtension));
			$item['fileIcon'.$i] = $ctypeArray['icon'];
		}
	}

	$sv = pnModFunc('iw_main', 'user', 'genSecurityValue');
	$photo = pnModFunc('iw_main', 'user', 'getUserPicture',
	                    array('uname' => $item['posterdata']['pn_uname'],
							  'sv' => $sv));
	$item['qui'] = "d";

	$pnRender -> assign('uploadFolder', pnModGetVar('iw_messages','uploadFolder'));
	$pnRender -> assign('message', $item);
	$pnRender -> assign('photo', $photo);
	$pnRender -> assign('authkey', pnSecGenAuthKey());
	$pnRender -> assign('inici', $inici);
	$pnRender -> assign('inicisend', $inicisend);
	$pnRender -> assign('filter', $filter);
	$pnRender -> assign('filtersend', $filtersend);
	$pnRender -> assign('rpp', $rpp);
	$pnRender -> assign('rppsend', $rppsend);

	return $pnRender -> fetch('iw_messages_user_display.htm');
}

/**
 * displaysend item send
 *
 * This function allow users to read send messages
 *
 * @param        integer      $tid     the ID of the item to display
 * @return       output       The item detail page
 */
function iw_messages_user_displaysend($args)
{
	$dom = ZLanguage::getModuleDomain('iw_messages');
	$msgid = FormUtil::getPassedValue('msgid', isset($args['msgid']) ? $args['msgid'] : 0, 'GET');
	$uid = FormUtil::getPassedValue('uid', isset($args['uid']) ? $args['uid'] : 0, 'GET');
	$inici = FormUtil::getPassedValue('inici', isset($args['inici']) ? $args['inici'] : null, 'REQUEST');
	$rpp = FormUtil::getPassedValue('rpp', isset($args['rpp']) ? $args['rpp'] : null, 'POST');
	$inicisend = FormUtil::getPassedValue('inicisend', isset($args['inicisend']) ? $args['inicisend'] : null, 'REQUEST');
	$rppsend = FormUtil::getPassedValue('rppsend', isset($args['rppsend']) ? $args['rppsend'] : null, 'POST');
	$filtersend = FormUtil::getPassedValue('filtersend', isset($args['filtersend']) ? $args['filtersend'] : null, 'POST');
	$filter = FormUtil::getPassedValue('filter', isset($args['filter']) ? $args['filter'] : null, 'POST');
	
	// The API function is called.  The arguments to the function are passed in
    	// as their own arguments array
    	$item = pnModAPIFunc('iw_messages', 'user', 'get',
    	                      array('uid' => $uid,
									'msgid' => $msgid));


	// The return value of the function is checked here, and if the function
	// suceeded then an appropriate message is posted.  Note that if the
	// function did not succeed then the API function should have already
	// posted a failure message so no action is required
	if (!$item) {
		LogUtil::registerError (__('Message not found', $dom));
		return pnRedirect(pnModURL('iw_messages', 'user', 'main'));	
	}
	//Security check
	if(pnUserGetVar('uid') != $item['from_userid']){
		LogUtil::registerError (__('Message not found', $dom));
		return pnRedirect(pnModURL('iw_messages', 'user', 'main'));
	}
    // Turn this time string into a UNIX timestamp for use with GetUserTime
	$item['msg_time'] = mktime( substr($item['msg_time'], 11, 2),     // hour
                                substr($item['msg_time'], 14, 2),     // minute
                                '0',                                   // second
                                substr($item['msg_time'], 5, 2),      // month
                                substr($item['msg_time'], 8, 2),      // day
                                substr($item['msg_time'], 0, 4));     // year
	$pnRender = pnRender::getInstance('iw_messages',false);
	$pnRender -> cache_id = $uid . $msgid;
	$month_long = explode(' ', __('January February March April May June July August September October November December', $dom));

    if (!is_array($item)) {
       	$pnRender->assign('errormsg', __('You don\'t have any messages', $dom));
	} else {
       	$message = array();
       	$item['posterdata'] = pnUserGetVars($item['to_userid']);
		$sv = pnModFunc('iw_main', 'user', 'genSecurityValue');
		$item['posterdata']['pn_uname'] = pnModFunc('iw_main', 'user', 'getUserInfo',
		                                             array('uid' => $item['posterdata']['pn_uid'],
		                                                   'sv' => $sv));
    	if(substr($item['posterdata']['pn_url'], 0, 4) != 'http')  {
		$item['posterdata']['pn_url'] = "http://" . $item['posterdata']['pn_url'];
    	}
		
		$userTime = GetUserTime($item['msg_time']);
		$item['messagetime'] = date('d/', $userTime).$month_long[date('m', $userTime)-1].date('/Y - H.i', $userTime);		
		
    	// bit of a cheat here .. greg.
    	$item['message'] = pnModAPIFunc('iw_messages', 'user', 'replacesignature',
    	                                 array('signature' => $item['posterdata']['user_sig'],
    	                                       'message' => $item['msg_text']));
		for ($i=1; $i < 4; $i++){
			// Get file extension
			$fileExtension = strtolower(substr(strrchr($item['file'.$i],"."),1));

			// get file icon
			$ctypeArray = pnModFunc('iw_main', 'user', 'getMimetype',
			                         array('extension' => $fileExtension));
			$item['fileIcon'.$i] = $ctypeArray['icon'];
		}
    }

	$sv = pnModFunc('iw_main', 'user', 'genSecurityValue');
	$photo = pnModFunc('iw_main', 'user', 'getUserPicture', 
	                    array('uname' => $item['posterdata']['pn_uname'],
							  'sv' => $sv));
	$item['qui'] = "r";
	$pnRender -> assign('send', '1');
	$pnRender -> assign('message', $item);
	$pnRender -> assign('photo', $photo);
	$pnRender -> assign('authkey', pnSecGenAuthKey());
	$pnRender -> assign('inici', $inici);
	$pnRender -> assign('inicisend', $inicisend);
	$pnRender -> assign('filter', $filter);
	$pnRender -> assign('filtersend', $filtersend);
	$pnRender -> assign('rpp', $rpp);
	$pnRender -> assign('rppsend', $rppsend);
	return $pnRender -> fetch('iw_messages_user_display.htm');
}

/**
 * Get a file from a server folder even it is out of the public html directory
 * @author:     Albert Pï¿œrez Monfort (aperezm@xtec.cat)
 * @param:	name of the file that have to be gotten
 * @return:	The file information
*/
function iw_messages_user_getFile($args)
{
	$dom = ZLanguage::getModuleDomain('iw_messages');
	// File name with the path
	$fileName = FormUtil::getPassedValue('fileName', isset($args['fileName']) ? $args['fileName'] : 0, 'GET');

	// Security check
	if (!SecurityUtil::checkPermission('iw_messages::', "::", ACCESS_OVERVIEW) || !pnUserLoggedIn()) {
		return LogUtil::registerError(__('Sorry! No authorization to access this module.', $dom), 403);
	}
	$sv = pnModFunc('iw_main', 'user', 'genSecurityValue');
	return pnModFunc('iw_main', 'user', 'getFile',
	                  array('fileName' => $fileName,
							'sv' => $sv));
}

/**
 * delete item
 *
 * @author       The PostNuke Development Team
 * @param        integer      $tid     the ID of the item to display
 * @return       output       The item detail page
 */
function iw_messages_user_delete($args)
{
	$dom = ZLanguage::getModuleDomain('iw_messages');
	if (!SecurityUtil::checkPermission( 'iw_messages::', '::', ACCESS_COMMENT) || !pnUserLoggedIn()) {
		return LogUtil::registerPermissionError();
	}

	$msg_id = FormUtil::getPassedValue('msg_id', isset($args['msg_id']) ? $args['msg_id'] : null, 'REQUEST');
	$total_messages = FormUtil::getPassedValue('total_messages', isset($args['total_messages']) ? $args['total_messages'] : null, 'POST');
	$qui = FormUtil::getPassedValue('qui', isset($args['qui']) ? $args['qui'] : null, 'REQUEST');
	if (empty($msg_id)) {
		LogUtil::registerError (__('No message(s) selected', $dom));
		return pnRedirect(pnModURL('iw_messages', 'user', 'view'));
	}
	$status = false;
	$uid = pnUserGetVar('uid');
	$sv = pnModFunc('iw_main', 'user', 'genSecurityValue');
	pnModFunc('iw_main', 'user', 'userSetVar',
	           array('uid' => $uid,
					 'name' => 'rpp',
					 'module' => 'iw_messages',
					 'sv' => $sv,
					 'value' => $rpp));
	if (is_array($msg_id)) {
		// delete multiple messages from a list
		for ($i = 0; $i < $total_messages; $i++) {
			if (isset($msg_id[$i])) {
				$status = pnModAPIFunc('iw_messages', 'user', 'delete',
				                        array('msgid' => $msg_id[$i],
											  'uid' => $uid,
											  'qui' => $qui));
				if (!$status) {
					return pnRedirect(pnModURL('iw_messages', 'user', 'view'));
				}
			}
		}
	} else {
		$status = pnModAPIFunc('iw_messages', 'user', 'delete',
		                        array('msgid' => $msg_id,
									  'uid' => $uid,
									  'qui' => $qui));
		if (!$status) {
			return pnRedirect(pnModURL('iw_messages', 'user', 'view'));
		}
	}
	if ($status) {
		$pnRender = pnRender::getInstance('iw_messages',false);
		$pnRender -> clear_cache(null, $uid);
		LogUtil::registerStatus (__('Your message has been deleted.', $dom));
		return pnRedirect(pnModURL('iw_messages', 'user', 'view'));
	}
}

/**
 * compose a message
 *
 * @author       The PostNuke Development Team
 * @param        integer      $tid     the ID of the item to display
 * @return       output       The item detail page
 */
function iw_messages_user_compose($args)
{
	$dom = ZLanguage::getModuleDomain('iw_messages');
	$reply = FormUtil::getPassedValue('reply', isset($args['reply']) ? $args['reply'] : null, 'REQUEST');
	$replied = FormUtil::getPassedValue('replied', isset($args['replied']) ? $args['replied'] : 0, 'POST');
	$send = FormUtil::getPassedValue('send', isset($args['send']) ? $args['send'] : null, 'POST');
	$msg_id = FormUtil::getPassedValue('msg_id', isset($args['msg_id']) ? $args['msg_id'] : null, 'REQUEST');
	$uname = FormUtil::getPassedValue('uname', isset($args['uname']) ? $args['uname'] : null, 'REQUEST');
	$message = FormUtil::getPassedValue('message', isset($args['message']) ? $args['message'] : null, 'POST');
	$touser = FormUtil::getPassedValue('touser', isset($args['touser']) ? $args['touser'] : null, 'POST');
	$to_group = FormUtil::getPassedValue('to_group', isset($args['to_group']) ? $args['to_group'] : null, 'POST');
	$image = FormUtil::getPassedValue('image', isset($args['image']) ? $args['image'] : null, 'POST');
	$inici = FormUtil::getPassedValue('inici', isset($args['inici']) ? $args['inici'] : null, 'REQUEST');
	$rpp = FormUtil::getPassedValue('rpp', isset($args['rpp']) ? $args['rpp'] : null, 'REQUEST');
	$inicisend = FormUtil::getPassedValue('inicisend', isset($args['inicisend']) ? $args['inicisend'] : null, 'REQUEST');
	$rppsend = FormUtil::getPassedValue('rppsend', isset($args['rppsend']) ? $args['rppsend'] : null, 'REQUEST');
	$filtersend = FormUtil::getPassedValue('filtersend', isset($args['filtersend']) ? $args['filtersend'] : null, 'REQUEST');
	$filter = FormUtil::getPassedValue('filter', isset($args['filter']) ? $args['filter'] : null, 'REQUEST');
	if (!SecurityUtil::checkPermission( 'iw_messages::', $uname . '::', ACCESS_COMMENT)) {
		return LogUtil::registerPermissionError();
	}
	$pnRender = pnRender::getInstance('iw_messages',false);
	if(isset($uname) && $uname!=''){$touser=$uname;}
	
	$sv = pnModFunc('iw_main', 'user', 'genSecurityValue');
	$groupsInfo = pnModFunc('iw_main', 'user', 'getAllGroupsInfo',
	                         array('sv' => $sv));
	$month_long = explode(' ', __('January February March April May June July August September October November December', $dom));
	if(!empty($reply)){
		$replied = $msg_id;
    	// The API function is called.  The arguments to the function are passed in
        // as their own arguments array
    	$item = pnModAPIFunc('iw_messages', 'user', 'get',
    	                      array('uid' => pnUserGetVar('uid'),
									'msgid' => $msg_id));
    	$fromuserdata = pnUserGetVars($item['from_userid']);
    	$touserdata = pnUserGetVars($item['to_userid']);
    	$user_id = pnUserGetVar('uid');
        if (pnUserLoggedIn() && ($user_id != $touserdata['pn_uid']) ) {
			LogUtil::registerError (__('You can\'t reply to that message. It wasn\'t sent to you.', $dom));
        	return pnRedirect(pnModURL('iw_messages', 'user', 'view'));
		}
		$pnRender -> assign('fromuser', $fromuserdata['pn_uname']);
		if(strpos($item['subject'],'Re:') === false){
			$reText = __('Re', $dom).': ';
		}
		$pnRender -> assign('subject', $reText.$item['subject']);
		
		if (!empty($uname)) {$pnRender->assign('touser', $uname);}
		$text = preg_replace('/(<br[ \/]*?>)/i', '', $item['msg_text']);
		$text = pnVarPrepHTMLDisplay($text);
        	$text = eregi_replace('\[addsig]', '', $text);
		$text = nl2br($text);

		$row['msg_time'] = mktime(substr($item['msg_time'], 11, 2),	// hour
						substr($item['msg_time'], 14, 2),	// minute
						'0',					// second
						substr($item['msg_time'], 5, 2),	// month
						substr($item['msg_time'], 8, 2),	// day
						substr($item['msg_time'], 0, 4));	// year
		$userTime = GetUserTime($row['msg_time']);
        $reply = "[quote=$fromuserdata[uname] ".__('wrote', $dom).' '.__('on', $dom).' '. date('d/', $userTime).$month_long[date('m', $userTime)-1].date('/Y - H.i', $userTime) ."]<br />" . '<div class="messageBody">' .$text."</div><br />[/quote]<br />".$item['reply'];
        $pnRender -> assign('reply', $reply);
		$pnRender -> assign('reply1', htmlspecialchars($reply));
	} else {
    	$reply = false;
    }
	if (pnModAvailable('bbsmile') && pnModIsHooked('bbsmile', 'iw_messages')){
    	$icons = pnModAPIFunc('bbsmile', 'user', 'getall');
    	$pnRender -> assign('icons', $icons);
	} else {
		$pnRender -> assign('icons', false);
	}
	// assign the username if both present and valid
	if (!empty($uname)) {
    	// we call the API to check if the uname is valid
    	$uid = pnUserGetIDFromName($uname);
    	if (isset($uid)) {
    	    $pnRender -> assign('toUserFixed', true);
    	    $pnRender -> assign('touser', $uname);
    	}
	}
	if (empty($msg_id)) {$msg_id = '';}
	//Check if the user can upload files
	$groupsCanUpdate = pnModGetVar('iw_messages','groupsCanUpdate');
	$multiMail = pnModGetVar('iw_messages','multiMail');
	$groupsUpdate = explode('$$',substr($groupsCanUpdate,0,-1));
	array_shift($groupsUpdate);

	foreach ($groupsUpdate as $update) {
		$names = explode('|',$update);

		$sv = pnModFunc('iw_main', 'user', 'genSecurityValue');
		$isMember = pnModFunc('iw_main', 'user', 'isMember',
		                       array('uid' => pnUserGetVar('uid'),
									 'gid' => $names[0],
									 'sgid' => $names[1],
									 'sv' => $sv));
		if ($isMember) {
			$canUpdate = true;
			break;
		}
	}
	//Check if the user can send mails to multi users
	$multiMail = explode('$$',substr($multiMail,0,-1));
	array_shift($multiMail);
	sort($multiMail);
	$allGroups = false;
	foreach ($multiMail as $multi) {
		$names = explode('-',$multi);
		$names1 = explode('|',$names[0]);
		$names2 = explode('|',$names[1]);
		$sv = pnModFunc('iw_main', 'user', 'genSecurityValue');
		$isMember = pnModFunc('iw_main', 'user', 'isMember',
		                       array('uid' => pnUserGetVar('uid'),
								     'gid' => $names1[0],
									 'sgid' => $names1[1],
									 'sv' => $sv));
		if ($isMember) {
			if ($names2[0] == 0 && $names2[1] == 0) {
				$allGroups = true;
				break;
			}
			$gn2 = $groupsInfo[$names2[0]];
			$groupsMulti_array[] = array('id' => $names2[0].'|'.$names2[1],
								         'name' => $gn2);
		}
	}
	if ($allGroups) {
		$sv = pnModFunc('iw_main', 'user', 'genSecurityValue');
		$grups = pnModFunc('iw_main', 'user', 'getAllGroups',
		                    array('sv' => $sv));
		$groupsMulti_array = array();
		$groupsMulti_array[] = array('id' => "0|0",
							         'name' => __('To all users', $dom));
		foreach ($grups as $grup) {
			$groupsMulti_array[] = array('id' => $grup['id'].'|0',
							             'name' => $grup['name']);
		}
	}
	$canMulti = (count($groupsMulti_array) > 0) ? true : false;
	$photosFolder = pnModGetVar('iw_messages', 'photosFolder');
	$multiMail = pnModGetVar('iw_messages', 'multiMail');
	$pnRender -> assign('replied', $replied);
	$pnRender -> assign('groupsMulti', $groupsMulti_array);
	$pnRender -> assign('canUpdate', $canUpdate);
	$pnRender -> assign('canMulti', $canMulti);
	$pnRender -> assign('msgid', $msg_id);
	$pnRender -> assign('extensions', pnModGetVar('iw_main','extensions'));
	$pnRender -> assign('message', $message);
	$pnRender -> assign('touser', $touser);
	$pnRender -> assign('to_group', $to_group);
	$pnRender -> assign('image', $image);
	$pnRender -> assign('inici', $inici);
	$pnRender -> assign('inicisend', $inicisend);
	$pnRender -> assign('filter', $filter);
	$pnRender -> assign('filtersend', $filtersend);
	$pnRender -> assign('rpp', $rpp);
	$pnRender -> assign('rppsend', $rppsend);
	$pnRender -> assign('dissableSuggest', pnModGetVar('iw_messages','dissableSuggest'));
	return $pnRender -> fetch('iw_messages_user_new.htm');
}

/**
 * submit a message
 *
 * @author       The PostNuke Development Team
 * @param        integer      $tid     the ID of the item to display
 * @return       output       The item detail page
 */
function iw_messages_user_submit($args){
	$dom = ZLanguage::getModuleDomain('iw_messages');
	$image = FormUtil::getPassedValue('image', isset($args['image']) ? $args['image'] : null, 'POST');
	$subject = FormUtil::getPassedValue('subject', isset($args['subject']) ? $args['subject'] : null, 'POST');
	$to_user = FormUtil::getPassedValue('to_user', isset($args['to_user']) ? $args['to_user'] : null, 'POST');
	$message = FormUtil::getPassedValue('message', isset($args['message']) ? $args['message'] : null, 'POST');
	$reply = FormUtil::getPassedValue('reply', isset($args['reply']) ? $args['reply'] : null, 'POST');
	$replied = FormUtil::getPassedValue('replied', isset($args['replied']) ? $args['replied'] : 0, 'POST');
	$file1 = FormUtil::getPassedValue('file1', isset($args['file1']) ? $args['file1'] : null, 'POST');
	$file2 = FormUtil::getPassedValue('file2', isset($args['file2']) ? $args['file2'] : null, 'POST');
	$file3 = FormUtil::getPassedValue('file3', isset($args['file3']) ? $args['file3'] : null, 'POST');
	$multi = FormUtil::getPassedValue('multi', isset($args['multi']) ? $args['multi'] : null, 'POST');
	if (!SecurityUtil::checkPermission( 'iw_messages::', $to_user . '::', ACCESS_COMMENT)) {
		return LogUtil::registerPermissionError();
	}
	// Confirm authorisation code
	if (!SecurityUtil::confirmAuthKey('iw_messages')) {
		return LogUtil::registerAuthidError (pnModURL('iw_messages', 'user', 'main'));
	}
	if (empty($to_user) && (!isset($multi) || $multi == '0')) {		
		LogUtil::registerError (__('Not user especified.', $dom));
        	return pnRedirect(pnModURL('iw_messages', 'user', 'view'));
    }
	if (empty($message)) {
		LogUtil::registerError (__('Error! Could not do what you wanted. Please check your input.', $dom));
		return pnRedirect(pnModURL('iw_messages', 'user', 'view'));
    }
	$message = nl2br($message);
	if (empty($subject)) {$subject = __('No subject', $dom);}
	if (pnUserLoggedin()) {$message .= "[addsig]";}
	//Create an array with the names of all the persons who are going to receipt the message
	$usersName = array();

	//parse the users for the message
	if (strpos($to_user,',') != 0) {
		//More than a user separeted by ,
		$users = explode(',',$to_user);
		foreach ($users as $user) {
			if ($user != '') {$usersName[] = $user;}
		}
	} else {
		//an alone user
		if ($to_user != '') {
			$usersName[] = $to_user;
		}
	}

	//Create an array with the ids of all the persons who are going to receipt the message
	$usersId = array();
	//For each user check if is a valid one.
	$noValidUser = '';	
	foreach ($usersName as $userName) {
		// get the user id
		$to_userid = pnUserGetIDFromName($userName);
		if (!$to_userid) {
			$noValidUser .= $userName.' - ';
		} else {
			$usersId[] = $to_userid;
		}
	}
	if ($noValidUser != '') {
		$noValidUser = substr($noValidUser,0,-3);
		LogUtil::registerError (__('Some of the users writed into the field A: are not correct. The incorrect users are: ', $dom) . $noValidUser);
		return pnRedirect((pnUserLoggedIn()) ? pnModURL('iw_messages', 'user', 'compose',
		                                                 array('touser' => $to_user,
														       'subject' => $subject,
															   'message' => str_replace('[addsig]','',$message),
															   'reply' => $reply,
															   'to_group' => $multi,
															   'image' => $image)) : 'index.php');
	}
	$groupsCanUpdate = pnModGetVar('iw_messages','groupsCanUpdate');
	$groupsUpdate = explode('$$',substr($groupsCanUpdate,0,-1));
	array_shift($groupsUpdate);
	foreach ($groupsUpdate as $update) {
		$names = explode('|',$update);
		$sv = pnModFunc('iw_main', 'user', 'genSecurityValue');
		$isMember = pnModFunc('iw_main', 'user', 'isMember',
		                       array('uid' => pnUserGetVar('uid'),
									 'gid' => $names[0],
									 'sgid' => $names[1],
									 'sv' => $sv));
		if ($isMember) {
			$canUpdate = true;
			break;
		}
	}
	$multiMail = pnModGetVar('iw_messages','multiMail');

	//Check if the user can really send multiple mails to the grups especified
	$canMultiMail = false;
	//Get the group of the user who send the message
	$sv = pnModFunc('iw_main', 'user', 'genSecurityValue');
	$userGroups = pnModFunc('iw_main', 'user', 'getAllUserGroups',
	                         array('uid' => pnUserGetVar('uid'),
								   'sv' => $sv));
	foreach ($userGroups as $userGroup) {
		$multip = explode('|',$multi);
		if(strpos($multiMail,'$'.$userGroup['id'].'|0-0|0$') != 0 ||
			strpos($multiMail,'$'.$userGroup['id'].'|0-'.$multi.'$') != 0 ||
			strpos($multiMail,'$'.$userGroup['id'].'|0-'.$multip[0].'|0$') != 0){
			//The user can send to everybody
			$canMultiMail = true;
			break;
		}
	}
	//Add the user in the array of user who send the message
	if ($canMultiMail) {
		if($multi == '0|0'){
			$sv = pnModFunc('iw_main', 'user', 'genSecurityValue');
			$allUsers = pnModFunc('iw_main', 'user', 'getAllUsersInfo',
			                       array('sv' => $sv));
			foreach($allUsers as $user){
				$usersId[] = pnUserGetIDFromName($user);
			}
		} else {
			if ($multi != '0') {
				$members = explode('|',$multi);
				if ($members[1] == 0) {
					$sv = pnModFunc('iw_main', 'user', 'genSecurityValue');
					$membersList = pnModFunc('iw_main', 'user', 'getMembersGroup',
					                          array('sv' => $sv,
													'gid' => $members[0]));
				} else {
					$sv = pnModFunc('iw_main', 'user', 'genSecurityValue');
					$membersList = pnModFunc('iw_main', 'user', 'getMembersGroup',
					                          array('sv' => $sv,
													'gid' => $members[1]));
				}
				foreach ($membersList as $member) {
					$usersId[] = $member['id'];
				}	
			}
		}
	}

	if (count($usersId) == 0) {
		LogUtil::registerError (_MESSAGESUSERNOTINDB . ', ' . __('Please check that the name of the user you are sending a message to is a real user and known by this system.', $dom));
	} else {
		if($canUpdate){
			//Update the attached files to the server
			for($i = 1; $i < 4; $i++){
				$update = array();
				$file = 'file'.$i;
				$$file = str_replace(' ','_',$_FILES['file'.$i]['name']);
				if($$file != ''){
					$folder = pnModGetVar('iw_messages','uploadFolder');
					$fileName = md5($$file.pnUserGetVar('uid'));
					$sv = pnModFunc('iw_main', 'user', 'genSecurityValue');
					$update = pnModFunc('iw_main', 'user', 'updateFile',
					                     array('sv' => $sv,
											   'folder' => $folder,
											   'fileNameTemp' => $_FILES['file'.$i]['tmp_name'],
											   'fileRealName' => $_FILES['file'.$i]['name'],
											   'fileSize' => $_FILES['file'.$i]['size'],
											   'fileName' => $fileName));
					//the function returns the error string if the update fails and empty string if success
					if($update['msg'] != ''){
						LogUtil::registerError ($update['msg'].' '.__('Probably the message has been sent without the attached file', $dom));
						$$file = '';
					}
				}
			}
		}else{
			$file1 = '';
			$file2 = '';
			$file3 = '';
		}

		foreach($usersId as $userId){
			if (pnModAPIFunc('iw_messages', 'user', 'create',
			                  array('image' => $image,
									'subject' => $subject,
									'to_userid' => $userId,
									'message' => $message,
									'reply' => $reply,
									'file1' => str_replace(' ', '_', $file1),
									'file2' => str_replace(' ', '_', $file2),
									'file3' => str_replace(' ', '_', $file3)))){
				$pnRender = pnRender::getInstance('iw_messages',false);
				$pnRender -> clear_cache(null, $to_userid);
				$sended++;
			} else {
				$error++;
			}
		}
	}
	if($sended > 0){
		$sendedText = ($sended > 1) ? __('Number of sent messages:', $dom).' '.$sended : '';
		LogUtil::registerStatus (__('Your message has been posted.', $dom).' '.$sendedText);
		if($replied > 0){
			//Set a message as replied
			pnModAPIFunc('iw_messages','user','setreplied',
			              array('msgid' => $replied));
		}
	}
	if($error > 0){
		$errorText = ($error > 1) ? __('Errors number:', $dom).' '.$error : '';
		LogUtil::registerError (__('Error! Creation attempt failed.', $dom).' '.$errorText);
	}
	return pnRedirect((pnUserLoggedIn()) ? pnModURL('iw_messages', 'user', 'view') : 'index.php');
}

/**
 * delete item
 *
 * @author       The PostNuke Development Team
 * @param        integer      $tid     the ID of the item to display
 * @return       output       The item detail page
 */
function iw_messages_user_check($args)
{
	$dom = ZLanguage::getModuleDomain('iw_messages');
	if (!SecurityUtil::checkPermission( 'iw_messages::', '::', ACCESS_OVERVIEW) || !pnUserLoggedIn()) {
		return LogUtil::registerPermissionError();
	}

	$msg_id = FormUtil::getPassedValue('msg_id', isset($args['msg_id']) ? $args['msg_id'] : null, 'POST');
	$total_messages = FormUtil::getPassedValue('total_messages', isset($args['total_messages']) ? $args['total_messages'] : null, 'POST');

	if (empty($msg_id)) {
		LogUtil::registerError (__('No message(s) selected', $dom));
		return pnRedirect(pnModURL('iw_messages', 'user', 'view'));
	}

	$status = false;
	$uid = pnUserGetVar('uid');

	if (is_array($msg_id)) {
		// delete multiple messages for a list
		for ($i = 0; $i < $total_messages; $i++) {
			if (isset($msg_id[$i])) {
				$status = pnModAPIFunc('iw_messages', 'user', 'check',
				                        array('msgid' => $msg_id[$i],
											  'uid' => $uid));
				if (!$status) {
					return pnRedirect(pnModURL('iw_messages', 'user', 'view'));
				}
			}
		}
	} else {
		$status = pnModAPIFunc('iw_messages', 'user', 'delete',
		                        array('msgid' => $msg_id,
									  'uid' => $uid));
		if (!$status) {
			return pnRedirect(pnModURL('iw_messages', 'user', 'view'));
		}
	}
	if ($status) {
		$pnRender =& new pnRender('iw_messages');
		$pnRender -> clear_cache(null, $uid);
		LogUtil::registerStatus (__('Marked/unmarked messages', $dom));
		return pnRedirect(pnModURL('iw_messages', 'user', 'view'));
	}
}

/**
 * download file
 *
 * This function downloads the files attached to messages available.
 * @param        integer      $msg_id     the ID of the message
 * @param        integer      $file     the number of the file to download
 * @return       file         The file request
 */
function iw_messages_user_download($args)
{
	$dom = ZLanguage::getModuleDomain('iw_messages');
	// Get the parameters
	$msg_id = FormUtil::getPassedValue('msg_id', isset($args['msg_id']) ? $args['msg_id'] : null, 'GET');
	$file = FormUtil::getPassedValue('file', isset($args['file']) ? $args['file'] : null, 'GET');
	// Security check
	if (!SecurityUtil::checkPermission( 'iw_messages::', '::', ACCESS_OVERVIEW) ||
		!pnUserLoggedIn()) {
		return LogUtil::registerPermissionError();
	}
	// Needed arguments
	if (!isset($file) || !isset($msg_id) || !is_numeric($msg_id) || !is_numeric($file)) {
		return LogUtil::registerError (__('Error! Could not do what you wanted. Please check your input.', $dom));
	}
	$uid = pnUserGetVar('uid');
	// The API function is called.  The arguments to the function are passed in
	// as their own arguments array
	$item = pnModAPIFunc('iw_messages', 'user', 'get',
	                      array('uid' => $uid,
								'msgid' => $msg_id));
	// The return value of the function is checked here, and if the function
	// suceeded then an appropriate message is posted.  Note that if the
	// function did not succeed then the API function should have already
	// posted a failure message so no action is required
	if (!$item || ($item['to_userid'] != $uid && $item['from_userid'] != $uid)) {
		LogUtil::registerError (__('Message not found', $dom));
		return pnRedirect(pnModURL('iw_messages', 'user', 'main'));	
	}
	switch ($file){
		case 1: $file = $item['file1']; break;
		case 2:	$file = $item['file2']; break;
		case 3:	$file = $item['file3']; break;
	}

	//Create the name of the file to search in the server
	$fileNameInServer = md5($file.$item['from_userid']);

	$fileNameInServer = pnModGetVar('iw_messages','uploadFolder').'/'.$fileNameInServer;

	$sv = pnModFunc('iw_main', 'user', 'genSecurityValue');
	return pnModFunc('iw_main', 'user', 'downloadFile', array('fileName' => $file,
									'fileNameInServer' => $fileNameInServer,
									'sv' => $sv));
}

function iw_messages_user_pager($args)
{
	$dom = ZLanguage::getModuleDomain('iw_messages');
	$rpp = FormUtil::getPassedValue('rpp', isset($args['rpp']) ? $args['rpp'] : null, 'POST');
	$inici = FormUtil::getPassedValue('inici', isset($args['inici']) ? $args['inici'] : null, 'POST');
	$total = FormUtil::getPassedValue('total', isset($args['total']) ? $args['total'] : null, 'POST');
	$urltemplate = FormUtil::getPassedValue('urltemplate', isset($args['urltemplate']) ? $args['urltemplate'] : null, 'POST');
	$pnRender = pnRender::getInstance('iw_messages',false);
	//Security check
	if (!SecurityUtil::checkPermission( 'iw_messages::', '::', ACCESS_OVERVIEW) || !pnUserLoggedIn()) {
		return LogUtil::registerPermissionError();
	}

	// Quick check to ensure that we have work to do
	if ($total <= $rpp) {
		return;
	}

	if (!isset($inici) || empty($inici)) {
		$inici = 1;
	}

	if (!isset($rpp) || empty($rpp)) {
		$rpp = 10;
	}
	
	// Show startnum link
	if ($inici != 1) {
		$url = preg_replace('/%%/', 1, $urltemplate);
		$text = '<a href="'.$url.'"><<</a> | ';
	} else {
		$text = '<< | ';
	}
	$items[] = array('text' => $text);

	// Show following items
	$pagenum = 1;

	for ($curnum = 1; $curnum <= $total; $curnum += $rpp) {
		if (($inici < $curnum) || ($inici > ($curnum + $rpp - 1))) {
			//mod by marsu - use sliding window for pagelinks
			if ((($pagenum%10) == 0) // link if page is multiple of 10
					|| ($pagenum == 1) // link first page
					|| (($curnum > ($inici - 4 * $rpp)) //link -3 and +3 pages
					&&($curnum < ($inici + 4 * $rpp)))
			) {
				// Not on this page - show link
				$url = preg_replace('/%%/', $curnum, $urltemplate);
				$text = '<a href="'.$url.'">'.$pagenum.'</a> | ';
				$items[] = array('text' => $text);
			}
			//end mod by marsu
		} else {
			// On this page - show text
			$text = $pagenum.' | ';
			$items[] = array('text' => $text);
		}
		$pagenum++;
	}

	if (($curnum >= $rpp + 1) && ($inici < $curnum - $rpp)) {
		$url = preg_replace('/%%/', $curnum - $rpp, $urltemplate);
		$text = '<a href="'.$url.'">>></a>';
	} else {
		$text = '>>';
	}
	$items[] = array('text' => $text);

	$pnRender -> assign('items',$items);
	return $pnRender -> fetch('iw_messages_user_pager.htm');
}
